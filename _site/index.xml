<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aditya&#39;s Blog</title>
<link>https://your-site-url.com/</link>
<atom:link href="https://your-site-url.com/index.xml" rel="self" type="application/rss+xml"/>
<description>A collection of technical blogs and talks on machine learning and data science.</description>
<image>
<url>https://your-site-url.com/quarto.png</url>
<title>Aditya&#39;s Blog</title>
<link>https://your-site-url.com/</link>
</image>
<generator>quarto-1.6.32</generator>
<lastBuildDate>Wed, 06 Nov 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>Cpu-Scheduling-Deep-Reinforcement-learning</title>
  <dc:creator>Aditya Khedekar</dc:creator>
  <link>https://your-site-url.com/blog/Deep-RL/</link>
  <description><![CDATA[ 




<section id="project-overview" class="level2">
<h2 class="anchored" data-anchor-id="project-overview">Project Overview</h2>
<p>This project develops a Deep Reinforcement Learning (DRL) model that optimizes CPU scheduling, aiming to reduce turnaround time and outperform the traditional Round-Robin approach. Using Proximal Policy Optimization (PPO), the model dynamically adjusts task priorities to enhance scheduling efficiency.</p>
</section>
<section id="key-components" class="level2">
<h2 class="anchored" data-anchor-id="key-components">Key Components</h2>
<p>The following sections detail the main components of the project, from the PPO algorithm and custom Gym environment to the training process and model components.</p>
<section id="proximal-policy-optimization-ppo" class="level3">
<h3 class="anchored" data-anchor-id="proximal-policy-optimization-ppo">Proximal Policy Optimization (PPO)</h3>
<p>PPO is a popular DRL algorithm known for balancing sample efficiency with stability. It employs a clipped surrogate objective that prevents large policy updates, enabling stable learning. Here, PPO is central to optimizing scheduling policy, fine-tuning process priorities to minimize turnaround time.</p>
</section>
<section id="custom-gym-environment" class="level3">
<h3 class="anchored" data-anchor-id="custom-gym-environment">Custom Gym Environment</h3>
<p>A custom Gym environment (<code>PrioritySchedulerEnv</code>) was developed to provide a controlled setting for training the scheduling model. This environment manages processes based on their arrival time and instruction count, prioritizing them dynamically during runtime. Processes are assigned priorities from 0 to 10, reshuffled in a priority queue, and executed accordingly.</p>
<p>The project implements a custom Gymnasium environment (<code>PrioritySchedulerEnv</code>) that simulates a priority-based process scheduler. Key features include:</p>
<ul>
<li><strong>Observation Space</strong>: A matrix of shape <code>(encoder_context + 1, 5)</code> representing:
<ul>
<li>Current process information (PID, arrival time, total instructions, remaining instructions)</li>
<li>Priority queue state for context</li>
</ul></li>
<li><strong>Action Space</strong>: Discrete actions representing priority levels (0 to max_priority-1)</li>
<li><strong>Reward Function</strong>: <code>100 * completed_processes - sum(turnaround_times)</code>
<ul>
<li>Balances throughput (completed processes) with turnaround time optimization</li>
</ul></li>
</ul>
</section>
<section id="probability-and-action-selection-with-multivariate-normal-distribution" class="level3">
<h3 class="anchored" data-anchor-id="probability-and-action-selection-with-multivariate-normal-distribution">Probability and Action Selection with Multivariate Normal Distribution</h3>
<p>In this project, PPO models policy distributions over actions, allowing for probability-based action selection. A multivariate normal distribution is applied to the action space, leveraging a covariance matrix to encourage diverse actions while maintaining stability.</p>
</section>
<section id="priority-assignment-and-queueing" class="level3">
<h3 class="anchored" data-anchor-id="priority-assignment-and-queueing">Priority Assignment and Queueing</h3>
<p>Processes are assigned priorities (0-10) that determine their positions in the priority queue. This priority directly influences execution order, allowing the model to adaptively reshuffle processes for optimal performance based on real-time feedback.</p>
</section>
<section id="reward-model" class="level3">
<h3 class="anchored" data-anchor-id="reward-model">Reward Model</h3>
<p>The reward model in this environment incentivizes quick completion of processes. Rewards are structured as:</p>
<ul>
<li><strong>Positive Reward:</strong> Granted for completed processes.</li>
<li><strong>Penalty:</strong> Incurred based on the sum of turnaround times for completed processes.</li>
</ul>
<p>The PPO modelâ€™s objective is to maximize positive rewards while minimizing penalties, ultimately optimizing scheduling.</p>
</section>
</section>
<section id="ppo-class" class="level2">
<h2 class="anchored" data-anchor-id="ppo-class">PPO Class</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gymnasium <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gym</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.distributions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultivariateNormal</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Adam</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MSELoss</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wandb</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> neural_network <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FeedForwardNN</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PPO:</span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, env: gym.Env, obs_enc_dim: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize environment details</span></span>
<span id="cb1-12"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env</span>
<span id="cb1-13"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.obs_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env.observation_space.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> env.observation_space.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-14"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.obs_enc_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obs_enc_dim</span>
<span id="cb1-15"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.act_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env.action_space.n</span>
<span id="cb1-16"></span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize hyperparameters and neural networks</span></span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._init_hyperparameters()</span>
<span id="cb1-19">        wandb.init(</span>
<span id="cb1-20">            project<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-ppo-project"</span>,</span>
<span id="cb1-21">            config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb1-22">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timesteps_per_batch"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.timesteps_per_batch,</span>
<span id="cb1-23">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_timesteps_per_episode"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_timesteps_per_episode,</span>
<span id="cb1-24">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gamma"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma,</span>
<span id="cb1-25">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_updates_per_iteration"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_updates_per_iteration,</span>
<span id="cb1-26">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clip"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clip,</span>
<span id="cb1-27">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lr"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr,</span>
<span id="cb1-28">            },</span>
<span id="cb1-29">        )</span>
<span id="cb1-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FeedForwardNN(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.obs_dim, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.act_dim)</span>
<span id="cb1-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.critic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FeedForwardNN(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.obs_dim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actor_optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Adam(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actor.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr)</span>
<span id="cb1-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.critic_optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Adam(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.critic.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr)</span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cov_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.act_dim,), fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cov_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.diag(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cov_var)</span>
<span id="cb1-36"></span>
<span id="cb1-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actor-Critic Loss Backpropagation</span></span>
<span id="cb1-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_networks(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, actor_loss, critic_loss):</span>
<span id="cb1-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actor loss backpropagation</span></span>
<span id="cb1-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actor_optim.zero_grad()</span>
<span id="cb1-41">        actor_loss.backward(retain_graph<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.actor_optim.step()</span>
<span id="cb1-43"></span>
<span id="cb1-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Critic loss backpropagation</span></span>
<span id="cb1-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.critic_optim.zero_grad()</span>
<span id="cb1-46">        critic_loss.backward()</span>
<span id="cb1-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.critic_optim.step()</span></code></pre></div>
<section id="neural-network-architecture" class="level3">
<h3 class="anchored" data-anchor-id="neural-network-architecture">Neural Network Architecture</h3>
<p>The implementation uses a feed-forward neural network with the following structure:</p>
<p>````python import torch from torch import nn import torch.nn.functional as F import numpy as np</p>
<p>class FeedForwardNN(nn.Module): def <strong>init</strong>(self, in_dim, out_dim): super(FeedForwardNN, self).__init__()</p>
<pre><code>    self.layer1 = nn.Linear(in_dim, 64)
    self.layer2 = nn.Linear(64, 64)
    self.layer3 = nn.Linear(64, out_dim)

def forward(self, obs):
    if isinstance(obs, np.ndarray):
        obs = torch.tensor(obs, dtype=torch.float)

    # todo applies relu activation to the output of the layer
    activation1 = F.relu(self.layer1(obs))
    activation2 = F.relu(self.layer2(activation1))
    output = self.layer3(activation2)

    return output</code></pre>
<p>```</p>


</section>
</section>

 ]]></description>
  <guid>https://your-site-url.com/blog/Deep-RL/</guid>
  <pubDate>Wed, 06 Nov 2024 18:30:00 GMT</pubDate>
</item>
</channel>
</rss>
